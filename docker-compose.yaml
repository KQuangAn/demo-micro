services:
  # frontend:
  #   build:
  #     context: ./frontend
  #   ports:
  #     - '3000:3000'
  #     - '3001:3001'
  #     - '3002:3002'
  #   env_file:
  #     - ./frontend/.env
  #   volumes:
  #     - ./frontend/frontend:/app
  #   working_dir: /app
  #   command: turbo dev
  # Backend
  orders-service:
    build:
      context: ./backend/order-service
    ports:
      - '9001:9001'
    env_file:
      - ./backend/order-service/.env
    dns:
      - 10.0.2.20
    environment:
      - PORT=9001
      - DATABASE_URL=orders-db:5432
    depends_on:
      - orders-db
      - localstack
    networks:
      - app-network

  inventory-service:
    build:
      context: ./backend/inventory-service
    ports:
      - '9000:9000'
    dns:
      - 10.0.2.20
    environment:
      - PORT=9000
      - DATABASE_URL=postgres://postgres:postgres@inventory-db:5432/inventory
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-southeast-1
      - AWS_SESSION_TOKEN=test
      - AWS_ENDPOINT=http://localstack:4566
    env_file:
      - ./backend/inventory-service/.env
    depends_on:
      - inventory-db
      - localstack
    networks:
      - app-network

  notification-service:
    build:
      context: ./backend/notification-service
    ports:
      - '9002:9002'
    environment:
      - DATABASE_URL=postgres://notification_user:notification_password@notification-db:5432/notification_db
    depends_on:
      - notification-db
      - localstack
    networks:
      - app-network

  # Databases for Each Service
  orders-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - '5431:5432'
    volumes:
      - orders-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  inventory-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    ports:
      - '5432:5432'
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  notification-db:
    image: mongo:latest
    environment:
      - MONGO_INITDB_DATABASE=noti
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=root
    ports:
      - '27017-27019:27017-27019'
    volumes:
      - mongodbdata:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: always
    networks:
      - app-network

  #AWS EventBridge and SQS (simulated using Localstack)
  localstack:
    image: localstack/localstack
    ports:
      - '4566:4566'
      - '4510-4559:4510-4559'
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-southeast-1
      - SERVICES=sqs,events
      - DEBUG=${DEBUG:-0}
      - DNS_RESOLVE_IP=10.0.2.20
      - PERSISTENCE=1
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - ./concurent.sh:/concurent.sh
      - ./volume:/var/lib/localstack
    networks:
      app-network:
        ipv4_address: 10.0.2.20
    post_start:
      - command:
          ['sh', '-c', 'chmod +x /concurent.sh && /concurent.sh && exec "$@"']
        user: root
    healthcheck:
      test:
        - CMD
        - bash
        - -c
        - awslocal sqs list-queues
      interval: 100s
      timeout: 10s
      start_period: 10s
volumes:
  orders-db-data:
  inventory-db-data:
  mongodbdata:
    driver: local

  # Specify the subnet range for IP address allocation
networks:
  app-network:
    ipam:
      config:
        - subnet: 10.0.2.0/24
    driver: bridge
