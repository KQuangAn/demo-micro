scalar Time
scalar UUID

type Order @key(fields: "id") {
  id: UUID!
  userId: UUID!
  createdAt: Time!
  updatedAt: Time!
}

type OrderDetail @key(fields: "id") {
  id: UUID!
  orderId: UUID!
  productId: UUID!
  quantity: Int!
  price: Float!
  currency: String!
  status: OrderDetailStatus!
  createdAt: Time!
  updatedAt: Time!
}

enum OrderDetailStatus {
  pending
  validated
  delivering
  delivered
  completed
  cancelled
}

type OrderEdge {
  node: Order!
  cursor: Time!
}

type OrderConnection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
}

type OrderDetailEdge {
  node: OrderDetail!
  cursor: Time!
}

type OrderDetailConnection {
  edges: [OrderDetailEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Time
  endCursor: Time
}

type Query {
  getOrdersByUserId(
    userId: UUID!
    first: Int
    after: Time
  ): OrderConnection!

  getOrderDetailsByOrderId(
    orderId: UUID!
    first: Int
    after: Time
  ): OrderDetailConnection!
}

type Mutation {
  updateOrderDetail(
    orderDetailId: UUID!
    quantity: Int
    status: OrderDetailStatus
  ): OrderDetail!

  cancelOrder(id: UUID!): Order!
}